/* Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n) from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. Total cost of a path to reach (m, n) is sum of all the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a given cell, i.e., from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed. You may assume that all costs are positive integers.

For example, in the following figure, what is the minimum cost path to (2, 2)? */



public class minCost {

	public static void main(String[] orgs){
		
		int[][] cost = {{1,2,3},
						{4,8,2},
						{1,5,3}};
		
		System.out.println("minCost"+ minCost(cost,2,2));
		
		}
	
	public static int min(int x, int y, int z){
		
		if(x<y)
			return (x<z) ? x: z;
		else
			return (y<z) ? y: z;
	}
	public static int minCost(int cost[][], int m, int n){
		
		int i,j;
		int total_cost[][] = new int[m+1][n+1];
		
		total_cost[0][0] = cost[0][0];
		
		for(i=1;i<=m;i++){
			total_cost[i][0] = cost[i][0] + total_cost[i-1][0];
		}
		for(j=1;j<=n;j++){
			total_cost[0][j] = cost[0][j] + total_cost[0][j-1];
		}
		
		for(i=1;i<=m;i++)
			for(j=1;j<=n;j++){
				total_cost[i][j] = cost[i][j] + min(total_cost[i-1][j], total_cost[i-1][j-1], total_cost[i][j-1]);
			}
		
		
		return total_cost[m][n];
		
	}
}
	
